"""
Django settings for TestPlatform project.

Generated by 'django-admin startproject' using Django 3.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import datetime
import os
import time

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/


cur_path = os.path.dirname(os.path.realpath(__file__))  # log_path是存放日志的路径
log_path = os.path.join(os.path.dirname(cur_path), 'logs')
if not os.path.exists(log_path):
    os.mkdir(log_path)  # 如果不存在这个logs文件夹，就自动创建一个
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'f0r_qc(m^3$19xkthxb_f(nyhil4b@u42m3t6u#-r1$&@wy4ol'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 注册跨域
    "corsheaders",
    "rest_framework",
    # 应用项目子应用注册
    "apps.users.apps.UsersConfig",
    "apps.testcase.apps.TestcaseConfig",
    "apps.configures.apps.ConfiguresConfig",
    "apps.debugtalks.apps.DebugtalksConfig",
    "apps.envs.apps.EnvsConfig",
    "apps.interfaces.apps.InterfacesConfig",
    "apps.projects.apps.ProjectsConfig",
    "apps.reports.apps.ReportsConfig",
    "apps.testsuits.apps.TestsuitsConfig",
    "apps.backlog.apps.BacklogConfig",
    "apps.summary.apps.SummaryConfig"
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 添加跨域中间件
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.common.CommonMiddleware',
    # 关闭post token权限
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 添加跨域白名单
# 任何接口均可访问
CORS_ORIGIN_ALLOW_ALL = True
# 可以访问列表
# CORS_ORIGIN_WHITELITST = []

ROOT_URLCONF = 'TestPlatform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'TestPlatform.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        # 'ENGINE': 'django.db.backends.sqlite3',
        'ENGINE': 'django.db.backends.mysql',
        # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        # 指定数据库名称
        'NAME': "TestPlatform",
        #     指定数据库用户名
        "USER": "root",
        #     指定密码
        "PASSWORD": "123456",
        #     指定IP
        "HOST": "localhost",
        #     指定端口
        "POST": 3306

    },
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter'
    ],
    "DEFAULT_PAGINATION_CLASS": "utils.pagination.ManualPageNumberPagination",
    "PAGE_SIZE": 2,
    # 指定用于支持coreapi的Schema
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 指定JWT Token认证
        "rest_framework_jwt.authentication.JSONWebTokenAuthentication",
        # 使用token认证
        # DRF 框架默认情况下，使用的是用户会话认证
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication'

    ],
    # 授权类
    'DEFAULT_PERMISSION_CLASSES': [
        # 默认任何情况都可以访问
        # 'rest_framework.permissions.AllowAny',
        # 只有登录才可以访问接口
        # 'rest_framework.permissions.IsAuthenticated',
        # 只有管理员用户才可以访问
        # 'rest_framework.permissions.IsAdminUser',
        # 不登录时只能访问获取数据接口
        # 'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ],
}

JWT_AUTH = {
    # 配置token过期时间，默认为5分钟
    "JWT_EXPIRATION_DELTA": datetime.timedelta(days=1),
    # 前端请求头 token 前缀
    # "JWT_AUTH_HEADER_PREFIX": "JWT",
    # 指定自定义返回值
    "JWT_RESPONSE_PAYLOAD_HANDLER": "utils.jwt_handler.jwt_response_payload_handler",
}

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        # 日志格式
        'standard': {
            'format': '[%(asctime)s] [%(filename)s:%(lineno)d] [%(module)s:%(funcName)s] '
                      '[%(levelname)s]- %(message)s'},
        'simple': {  # 简单格式
            'format': '%(levelname)s %(message)s'
        },
    },
    # 过滤
    'filters': {
    },
    # 定义具体处理日志的方式
    'handlers': {
        # 默认记录所有日志
        'default': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(log_path, 'all-{}.log'.format(time.strftime('%Y-%m-%d'))),
            'maxBytes': 1024 * 1024 * 5,  # 文件大小
            'backupCount': 5,  # 备份数
            'formatter': 'standard',  # 输出格式
            'encoding': 'utf-8',  # 设置默认编码，否则打印出来汉字乱码
        },
        # 输出错误日志
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(log_path, 'error-{}.log'.format(time.strftime('%Y-%m-%d'))),
            'maxBytes': 1024 * 1024 * 5,  # 文件大小
            'backupCount': 5,  # 备份数
            'formatter': 'standard',  # 输出格式
            'encoding': 'utf-8',  # 设置默认编码
        },
        # 控制台输出
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard'
        },
        # 输出info日志
        'info': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(log_path, 'info-{}.log'.format(time.strftime('%Y-%m-%d'))),
            'maxBytes': 1024 * 1024 * 5,
            'backupCount': 5,
            'formatter': 'standard',
            'encoding': 'utf-8',  # 设置默认编码
        },
    },
    # 配置用哪几种 handlers 来处理日志
    'loggers': {
        # 类型 为 django 处理所有类型的日志， 默认调用
        'django': {
            'handlers': ['default', 'console'],
            'level': 'INFO',
            'propagate': False
        },
        # log 调用时需要当作参数传入
        'log': {
            'handlers': ['error', 'info', 'console', 'default'],
            'level': 'DEBUG',
            'propagate': True
        },
    }
}

# 报告下载路径
REPORTS_DIR = os.path.join(BASE_DIR, 'reports')

# 用例ymal整合后存放路径
# noinspection PyUnresolvedReferences
TESTCASE = os.path.join(BASE_DIR, "testcase")
